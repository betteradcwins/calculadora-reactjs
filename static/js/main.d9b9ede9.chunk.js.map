{"version":3,"sources":["components/Button.jsx","components/Display.jsx","main/Calculator.jsx","serviceWorker.js","index.js"],"names":["props","classes","operation","double","triple","onClick","e","click","label","className","value","initialState","displayValue","clearDisplay","values","current","Calculator","state","this","setState","equals","currentOperation","n","includes","i","newValue","parseFloat","addDigit","setOperation","clearMemory","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9b9ede9.chunk.js","sourcesContent":["import React from 'react'\nimport './Button.css'\n\n/*\n * Button component is a functional component what means it is stateless. \n */\nexport default props => {\n    const classes = 'button ' +\n        `${props.operation ? 'operation' : ''}` +\n        `${props.double ? 'double' : ''}` +\n        `${props.triple ? 'triple' : ''}`\n\n    return (\n        <button\n            onClick={e => props.click && props.click(props.label)}\n            className={classes}>\n            {props.label}\n        </button>)\n} ","import React from 'react'\nimport './Display.css'\n\nexport default props =>\n    <div className=\"display\">{props.value}</div>","import React, { Component } from 'react'\n\nimport './Calculator.css'\n\nimport Button from '../components/Button'\nimport Display from '../components/Display'\n\nconst initialState = {\n    displayValue: '0',\n    clearDisplay: false,\n    operation: null,\n    values: [0, 0],\n    current: 0\n}\n\nexport default class Calculator extends Component {\n\n    state = { ...initialState }\n\n    clearMemory() {\n        this.setState({ ...initialState })\n    }\n\n    setOperation(operation) {\n        if (this.state.current === 0) {\n            this.setState({ operation, current: 1, clearDisplay: true })\n        } else {\n            const equals = operation === '='\n            const currentOperation = this.state.operation\n\n            const values = [...this.state.values]\n            \n            switch(currentOperation) {\n                case '+':\n                    values[0] = values[0] + values[1]\n                    break\n                case '-':\n                    values[0] = values[0] - values[1]\n                    break\n                case '/':\n                    values[0] = values[0] / values[1]\n                    break\n                case '*':\n                    values[0] = values[0] * values[1]\n                    break\n                default:\n                    break\n            }\n            \n            this.setState({\n                displayValue: values[0],\n                operation: equals ? null : operation,\n                current: equals ? 0 : 1,\n                clearDisplay: !equals,\n                values\n            })\n        }\n    }\n\n    addDigit(n) {\n        if (n === '.' && this.state.displayValue.includes('.')) {\n            return\n        }\n\n        const clearDisplay = this.state.displayValue === '0'\n            || this.state.clearDisplay\n        const currentDisplay = clearDisplay && n !== '.' ? '' : this.state.displayValue\n        const displayValue = currentDisplay + n\n        this.setState({ displayValue, clearDisplay: false })\n\n        if (n !== '.') {\n            const i = this.state.current\n            const newValue = parseFloat(displayValue)\n            const values = [...this.state.values]\n            values[i] = newValue\n            this.setState({ values })\n        }\n    }\n\n    render() {\n        const addDigit = n => this.addDigit(n)\n        const setOperation = n => this.setOperation(n)\n\n        return <div className=\"calculator\">\n            <Display value={this.state.displayValue} />\n            <Button label=\"AC\" click={() => this.clearMemory()} triple />\n            <Button label=\"/\" click={setOperation} operation />\n            <Button label=\"7\" click={addDigit} />\n            <Button label=\"8\" click={addDigit} />\n            <Button label=\"9\" click={addDigit} />\n            <Button label=\"*\" click={setOperation} operation />\n            <Button label=\"4\" click={addDigit} />\n            <Button label=\"5\" click={addDigit} />\n            <Button label=\"6\" click={addDigit} />\n            <Button label=\"-\" click={setOperation} operation />\n            <Button label=\"1\" click={addDigit} />\n            <Button label=\"2\" click={addDigit} />\n            <Button label=\"3\" click={addDigit} />\n            <Button label=\"+\" click={setOperation} operation />\n            <Button label=\"0\" click={addDigit} double />\n            <Button label=\".\" click={addDigit} />\n            <Button label=\"=\" click={setOperation} operation />\n        </div>\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator'; \nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        <h1>Calculadora</h1>\n        <Calculator />\n    </div>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}